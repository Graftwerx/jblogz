// ----------------------------
// Prisma: generator & datasource
// ----------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===========================
 * NEW & CORE MODELS FIRST
 * ===========================
 */

// ---------- User (with handles) ----------
model User {
  id        String   @id // Kinde user ID
  email     String?  @unique
  handle    String   @unique // @username
  name      String?
  image     String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Back-relations (existing)
  posts              BlogPost[]
  comments           Comment[]
  postLikes          PostLike[]
  commentLikes       CommentLike[]
  following          Follow[]      @relation("Following") // users I follow
  followers          Follow[]      @relation("Followers") // users who follow me
  activities         Activity[]    @relation("ActorActivities")
  targetedActivities Activity[]    @relation("TargetUserActivities")

  // Favorites
  favorites Favorite[]

  // Conversations & messages
  conversationParticipants ConversationParticipant[]
  messages                 Message[] // back-rel to Message.sender

  // âœ… Distinct back-relations for message requests
  messageRequestsSent     MessageRequest[] @relation("MessageRequest_fromUser")
  messageRequestsReceived MessageRequest[] @relation("MessageRequest_toUser")

  // âœ… Distinct back-relations for blocks
  blocksInitiated Block[] @relation("Block_blocker")
  blocksReceived  Block[] @relation("Block_blocked")
}

// ---------- Follow (two relations to User) ----------
model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// ---------- Activity Types ----------
enum ActivityType {
  POST_CREATED
  POST_LIKED
  COMMENT_CREATED
  COMMENT_LIKED
  USER_FOLLOWED
}

// ---------- Activity (append-only feed) ----------
model Activity {
  id        String       @id @default(uuid())
  actorId   String
  type      ActivityType
  createdAt DateTime     @default(now())

  // Optional targets
  postId       String?
  commentId    String?
  targetUserId String?

  // Named relations so back-relations can match
  actor      User  @relation("ActorActivities", fields: [actorId], references: [id], onDelete: Cascade)
  targetUser User? @relation("TargetUserActivities", fields: [targetUserId], references: [id], onDelete: Cascade)

  post    BlogPost? @relation("PostActivities", fields: [postId], references: [id], onDelete: Cascade)
  comment Comment?  @relation("CommentActivities", fields: [commentId], references: [id], onDelete: Cascade)

  @@index([actorId, createdAt])
  @@index([type, createdAt])
  @@index([postId])
  @@index([commentId])
  @@index([targetUserId])
}

/**
 * ===========================
 * EXISTING MODELS (relations updated only)
 * ===========================
 */

// ---------- BlogPost ----------
model BlogPost {
  id       String  @id @default(uuid())
  title    String
  content  String
  imageUrl String? // optional
  videoUrl String? // optional
  audioUrl String? // optional

  // RELATION: author â†’ User FK
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // keep your denormalized fields
  authorName  String
  authorImage String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // convenience relations
  comments Comment[]
  likes    PostLike[]

  // Back-relation to Activity.post (named)
  activities Activity[] @relation("PostActivities")

  Favorite Favorite[]
}

// ---------- PostLike ----------
model PostLike {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // prevents double-like
  @@index([postId])
  @@index([userId])
}

// ---------- Comment ----------
model Comment {
  id          String   @id @default(uuid())
  postId      String
  authorId    String
  content     String
  authorName  String
  authorImage String
  parentId    String? // null = top-level comment; set = reply
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  post    BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")

  // RELATION: author â†’ User FK
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  likes CommentLike[]

  // Back-relation to Activity.comment (named)
  activities Activity[] @relation("CommentActivities")

  // helpful indexes
  @@index([postId, parentId, createdAt])
  @@index([authorId, createdAt])
}

// ---------- CommentLike ----------
model CommentLike {
  id        String   @id @default(uuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId]) // prevents double-like
  @@index([commentId])
  @@index([userId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      BlogPost @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId], name: "userId_postId")
}

enum ConversationState {
  PENDING
  ACTIVE
  BLOCKED
}

enum ParticipantRole {
  MEMBER
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state ConversationState @default(PENDING)

  participants ConversationParticipant[]
  messages     Message[]

  MessageRequest MessageRequest[]
}

model ConversationParticipant {
  id             String          @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  hasMuted       Boolean         @default(false)
  lastReadAt     DateTime        @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId], name: "conversation_user_unique")
}

model Message {
  id             String    @id @default(cuid())
  conversationId String
  senderId       String
  body           String
  createdAt      DateTime  @default(now())
  editedAt       DateTime?
  deletedAt      DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])
}

model MessageRequest {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  fromUserId     String
  toUserId       String
  conversationId String?
  status         RequestStatus @default(PENDING)

  // ðŸ‘‡ relation names disambiguate the two User relations
  fromUser User @relation("MessageRequest_fromUser", fields: [fromUserId], references: [id])
  toUser   User @relation("MessageRequest_toUser", fields: [toUserId], references: [id])

  // (optional but recommended) define the relation to Conversation
  conversation Conversation? @relation(fields: [conversationId], references: [id])

  @@unique([fromUserId, toUserId], name: "from_to_unique")
}

model Block {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  createdAt DateTime @default(now())

  // ðŸ‘‡ name both relations to User to avoid ambiguity
  blocker User @relation("Block_blocker", fields: [blockerId], references: [id])
  blocked User @relation("Block_blocked", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId], name: "blocker_blocked_unique")
}
